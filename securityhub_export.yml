# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: 2010-09-09
Description: Export Security Hub findings to a central s3 bucket.  Findings are stored in AWSLogs/account_id/product/region/ direrctory
Resources:
  SecurityHubLogBucket:
    Type: 'AWS::S3::Bucket'
    DependsOn:
      - BucketPermission
      - LambdaSortFindings
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt LambdaSortFindings.Arn
            Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: raw/firehose/
      LifecycleConfiguration:
        Rules:
          - Id: DeleteRawFiles
            Prefix: /raw/
            Status: Enabled
            ExpirationInDays: '5'
  BucketPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref LambdaSortFindings
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
  SecurityHubCloudWatchEvent:
    DependsOn:
      - SecurityHubFirehose
    Type: 'AWS::Events::Rule'
    Properties:
      Description: String
      State: ENABLED
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
      Targets:
        - Arn:
            'Fn::GetAtt':
              - SecurityHubFirehose
              - Arn
          Id: FirehoseStream
          RoleArn: !GetAtt SecurityHubLogDeliveryRole.Arn
  SecurityHubLogDeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: 'AllowSecurityHubLogDelivery'
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: securityhub_log_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'firehose:PutRecord'
                  - 'firehose:PutRecordBatch'
                Resource:
                  - !GetAtt SecurityHubFirehose.Arn
  SecurityHubFirehose:
    DependsOn:
      - SecurityHubFirehoseDeliveryPolicy
      - SecurityHubLogBucket
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !Join 
          - ''
          - - 'arn:aws:s3:::'
            - !Ref SecurityHubLogBucket
        BufferingHints:
          IntervalInSeconds: '900'
          SizeInMBs: '128'
        CompressionFormat: UNCOMPRESSED
        Prefix: raw/firehose/
        RoleARN: !GetAtt FirehoseDeliveryRole.Arn
  FirehoseDeliveryRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: 'AllowFirehoseDelivery'
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
  SecurityHubFirehoseDeliveryPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: firehose_delivery_policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 's3:AbortMultipartUpload'
              - 's3:GetBucketLocation'
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:ListBucketMultipartUploads'
              - 's3:PutObject'
            Resource:
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SecurityHubLogBucket
              - !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref SecurityHubLogBucket
                  - '*'
      Roles:
        - !Ref FirehoseDeliveryRole
  LambdaSortFindings:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3, json, logging, re
          s3_resource = boto3.resource('s3')
          s3_client = boto3.client('s3')
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info(event)
              record_count = 0

              for record in event['Records']:

                  bucket = record['s3']['bucket']['name']
                  object_key = record['s3']['object']['key']
                  partition = '/'.join(object_key.split('/')[2:-2])
                  object_name = object_key.split('/')[-1]
                  
                  response = s3_client.get_object(Bucket=bucket, Key=object_key)
                  findings = '['+ response['Body'].read().decode('utf-8').replace('}{','},\n{') +']'
                  
                  #following line replaces :0/ with _ to fix an issue with Glue data catalog down the road
                  findings = re.sub(":0/", "_", findings)
                  
                  #following line replaces aws/securityhub/FindingId with aws_securityhub_FindingId to fix an issue with Glue data catalog down the road
                  findings = re.sub("aws/securityhub/FindingId", "aws_securityhub_FindingId", findings)

                  #following line replaces aws/securityhub/CompanyName with aws_securityhub_CompanyName to fix an issue with Glue data catalog down the road
                  findings = re.sub("aws/securityhub/CompanyName", "aws_securityhub_CompanyName", findings)

                  #following line replaces aws/securityhub/ProductName with aws_securityhub_ProductName to fix an issue with Glue data catalog down the road
                  findings = re.sub("aws/securityhub/ProductName", "aws_securityhub_ProductName", findings)

                  #following line replaces aws/securityhub/annotation with aws_securityhub_annotation to fix an issue with Glue data catalog down the road
                  findings = re.sub("aws/securityhub/annotation", "aws_securityhub_annotation", findings)

                  findings_list = json.loads(findings)
                  record_count += len(findings_list)
                  output = {}
                  
                  for item in findings_list:
                      # For native AWS Services.  GuardDuty,Security Hub, Access Analyzer
                      # have been tested.
                      product_type = item['resources'][0].split('/')[3]
                      if product_type.startswith('arn:aws'):
                          product_node = item['resources'][0].split('/')[3]
                          logger.info(f'product node is {product_node}')
                          product = product_node.split(':')
                          product_name = product[2]
                          region = product[3]
                          account_id = product[4]
                      # Handle default and 3rd party product. Cloud Custodian falls into this category
                      # Other integrated product may have format that can cause problem
                      else:
                          product_name = item['resources'][0].split('/')[2]
                          region = item['resources'][0].split('/')[3]
                          account_id = item['resources'][0].split('/')[4]
                      key = account_id + '/' + product_name + '/'+ region
                      logger.info( f'key is {key}')

                      if key not in output:
                          output[key] = [item]
                      else:
                          output[key].append(item)
                  
                  for key in output:
                      s3_path = 'AWSLogs/'+ key +'/'+partition  + '/'  + object_name + '.json'
                      body = ''
                      for version in output[key]:
                          body += json.dumps(version) + '\n'
                      s3_resource.Bucket(bucket).put_object(Key=s3_path, Body=body)

                  #Assume cross account  role
                  sts_client = boto3.client('sts') 
                  sts_response =  sts_client.assume_role(RoleArn='arn:aws:iam::675958891276:role/KinesisDataStreamRW-nress-dev-0', 
                      RoleSessionName= 'SecurityHubFindings', 
                      DurationSeconds=900) 

                  #Configure the Kinesis client using the cross-account role
                  kinesis_client = boto3.client('kinesis', region_name='ca-central-1',
                      aws_access_key_id = sts_response['Credentials']['AccessKeyId'], 
                      aws_secret_access_key = sts_response['Credentials']['SecretAccessKey'], 
                      aws_session_token = sts_response['Credentials']['SessionToken'])
                  
                  for key in output:
                      partition_key = 'AWSLogs/'+ key +'/'+ partition  + '/'  + object_name + '.json'
                      body = ''
                      for version in output[key]:
                          body += json.dumps(version) + '\n'

                      #Write to the Kinesis stream in other account 
                      response = kinesis_client.put_record(
                                  StreamName='nress-dev-0',
                                  Data= body,
                                  PartitionKey= partition_key)
                  Handler: index.handler
      Runtime: python3.7
      Description: Function sorts findings by AWS account id/product/region
      MemorySize: 128
      Timeout: 300
      Role:
        'Fn::GetAtt':
          - LambdaSortRole
          - Arn
  LambdaSortRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
Outputs:
  S3BucketName:
    Description: Name of the bucket used for storing logs
    Value: !Ref SecurityHubLogBucket